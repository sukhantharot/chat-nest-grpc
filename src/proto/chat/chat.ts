// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v5.27.2
// source: src/proto/chat/chat.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "chat";

export interface User {
  userId: string;
}

export interface Message {
  senderId: string;
  receiverId: string;
  messageContent: string;
  timestamp: string;
}

export interface SendMessageResponse {
  success: boolean;
}

export const CHAT_PACKAGE_NAME = "chat";

export interface ChatServiceClient {
  sendMessage(request: Message): Observable<SendMessageResponse>;

  streamMessages(request: User): Observable<Message>;

  chatStream(request: Observable<Message>): Observable<Message>;
}

export interface ChatServiceController {
  sendMessage(request: Message): Promise<SendMessageResponse> | Observable<SendMessageResponse> | SendMessageResponse;

  streamMessages(request: User): Observable<Message>;

  chatStream(request: Observable<Message>): Observable<Message>;
}

export function ChatServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["sendMessage", "streamMessages"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ChatService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = ["chatStream"];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ChatService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const CHAT_SERVICE_NAME = "ChatService";
